{
  "id": "common",
  "response": "1. What the issue is: Using a mutable object (a list) as a default argument value (`resultList=[]`).\nWhy it's a problem: Default arguments are evaluated once when the function is defined. The *same* list object is used for every call where `resultList` is not explicitly provided. This means subsequent calls to the function without the `resultList` argument will append to the list modified by previous calls, leading to unexpected state sharing and incorrect, cumulative results across calls.\nHow to fix it: Use `None` as the default value and create a new list inside the function if the argument is `None`.\nExample Fix: `def doTask(x, y=100, resultList=None): ... if resultList is None: resultList = [] ...`\n\n2. What the issue is: Poor function naming (`doTask`).\nWhy it's a problem: The name `doTask` is generic and does not clearly describe what the function does or its purpose. This makes the code harder to understand and maintain.\nHow to fix it: Choose a name that clearly indicates the function's action or result, such as `process_value_and_append` or a name specific to the actual task being performed (if known).\n\n3. What the issue is: Magic number (`y=100`).\nWhy it's a problem: The literal value `100` is used as a default for `y` without any context or explanation of what it represents. This makes the code less readable and harder to understand the significance of this value.\nHow to fix it: Assign the value to a named constant that describes its meaning (e.g., `DEFAULT_OFFSET = 100`).\n\n4. What the issue is: Magic number (`3.14`).\nWhy it's a problem: The literal value `3.14` is used directly in a calculation. This appears to be an approximation of Pi, but using a raw number hides its meaning and purpose. If the value needs to be changed (e.g., to a more precise value), finding and modifying it is harder.\nHow to fix it: Use a named constant (e.g., `PI_APPROX = 3.14`) or, preferably, import a more precise value from a standard library (`import math; PI = math.pi`).\n\n5. What the issue is: Unused variable (`unused`).\nWhy it's a problem: The variable `unused` is assigned a value but is never read or used anywhere in the function. This adds unnecessary clutter to the code and might confuse readers. It could be leftover from debugging or incomplete development.\nHow to fix it: Remove the line `unused = \"debug\"`.\n\nTotal bugs: 1\nTotal quality issues: 4",
  "response_time_sec": 12.5,
  "memory_used_bytes": -98304
}